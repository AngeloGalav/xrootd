
use xrdmon_kan;

DROP TABLE If EXISTS tmpTopUsers;

CREATE TABLE IF NOT EXISTS tmpTopUsers (
  userName    VARCHAR(24),
  nFilesNow   INT NOT NULL,
  nJobsNow    INT NOT NULL,
  mbRead      BIGINT NOT NULL,
  nFiles      INT NOT NULL,
  nJobs       INT NOT NULL,
  timePeriod  VARCHAR(8) # "hour", "month", "year"
);



####################################################
############# prepare all for 1 hour ###############
####################################################


#keep list of top user ids for all sortings
CREATE TEMPORARY TABLE tt (userId INT PRIMARY KEY);

# top 20 now-nFiles
REPLACE INTO tt 
       SELECT userId
       FROM (SELECT userId,
                    COUNT(DISTINCT pathId) AS n
             FROM   rtOpenedSessions os, rtOpenedFiles of
             WHERE  os.id = of.sessionId
                    GROUP BY userId
                    ORDER BY n DESC
                    LIMIT 20
            ) AS X;

# top 20 now-nJobs
REPLACE INTO tt 
       SELECT userId
       FROM (SELECT userId,
                    COUNT(DISTINCT CONCAT(pId, clientHId) ) AS n
             FROM   rtOpenedSessions os, rtOpenedFiles of
             WHERE  os.id = of.sessionId
                    GROUP BY userId
                    ORDER BY n DESC
                    LIMIT 20
            ) AS X;

# top 20 past-mbRead
CREATE TEMPORARY TABLE t_ (userId INT, value BIGINT);
INSERT INTO t_
       SELECT userId,
              SUM(bytesR)/(1024*1024) AS n
       FROM   rtOpenedSessions os, rtClosedFiles cf
       WHERE  os.id = cf.sessionId AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 HOUR)
              GROUP BY userId
              ORDER BY n DESC
              LIMIT 20;
INSERT INTO t_
       SELECT userId,
              SUM(bytesR)/(1024*1024) AS n
       FROM   rtClosedSessions os, rtClosedFiles cf
       WHERE  os.id = cf.sessionId AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 HOUR)
              GROUP BY userId
              ORDER BY n DESC
              LIMIT 20;
REPLACE INTO tt
        SELECT userId
        FROM (SELECT userId,
                     SUM(value) AS n
              FROM   t_
                     GROUP BY userId
                     ORDER BY n DESC
                     LIMIT 20
             ) AS X;
DROP TABLE t_;

# top 20 past-nFiles
CREATE TEMPORARY TABLE t_ (userId INT, value INT);
INSERT INTO t_
       SELECT userId,
              COUNT(DISTINCT pathId) AS n
       FROM   rtOpenedSessions os, rtClosedFiles cf
       WHERE  os.id = cf.sessionId AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 HOUR)
              GROUP BY userId
              ORDER BY n DESC
              LIMIT 20;
INSERT INTO t_
       SELECT userId,
              COUNT(DISTINCT pathId) AS n
       FROM   rtClosedSessions os, rtClosedFiles cf
       WHERE  os.id = cf.sessionId AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 HOUR)
              GROUP BY userId
              ORDER BY n DESC
              LIMIT 20;
REPLACE INTO tt
        SELECT userId
        FROM (SELECT userId,
                     SUM(value) AS n
              FROM   t_
                     GROUP BY userId
                     ORDER BY n DESC
                     LIMIT 20
             ) AS X;
DROP TABLE t_;


# top 20 past-nJobs
REPLACE INTO tt
       SELECT userId
       FROM (SELECT userId, 
                    COUNT(DISTINCT CONCAT(pId, clientHId) ) AS n
             FROM   rtClosedSessions os
             WHERE  disconnectT > DATE_SUB(NOW(), INTERVAL 1 HOUR)
                    GROUP BY userId
                    ORDER BY n DESC
                    LIMIT 20
             ) AS X;


#############
#So I have a complete list of user names in tt, now build final table


# now: nFiles and nJobs
INSERT INTO tmpTopUsers (userName, nFilesNow, nJobsNow, timePeriod)
       SELECT userName, 
              COUNT(DISTINCT pathId),
              COUNT(DISTINCT CONCAT(pId, clientHId) ),
              "hour"
       FROM   users, tt, rtOpenedSessions os, rtOpenedFiles of
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = of.sessionId
              GROUP BY tt.userId;

# past: mbRead
INSERT INTO tmpTopUsers (userName, mbRead, timePeriod)
       SELECT userName,
              SUM(bytesR)/(1024*1024) AS n,
              "hour"
       FROM   users, tt, rtOpenedSessions os, rtClosedFiles cf
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = cf.sessionId  AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 HOUR)
              GROUP BY tt.userId;
INSERT INTO tmpTopUsers (userName, mbRead, timePeriod)
       SELECT userName,
              SUM(bytesR)/(1024*1024) AS n,
              "hour"
       FROM   users, tt, rtClosedSessions os, rtClosedFiles cf
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = cf.sessionId  AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 HOUR)
              GROUP BY tt.userId;

# past: nFiles
INSERT INTO tmpTopUsers (userName, nFiles, timePeriod)
       SELECT userName,
              COUNT(DISTINCT pathId),
              "hour"
       FROM   users, tt, rtOpenedSessions os, rtClosedFiles cf
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = cf.sessionId  AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 HOUR)
              GROUP BY tt.userId;
INSERT INTO tmpTopUsers (userName, nFiles, timePeriod)
       SELECT userName,
              COUNT(DISTINCT pathId),
              "hour"
       FROM   users, tt, rtClosedSessions os, rtClosedFiles cf
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = cf.sessionId  AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 HOUR)
              GROUP BY tt.userId;

#past: nJobs
INSERT INTO tmpTopUsers (userName, nJobs, timePeriod)
       SELECT userName,
              COUNT(DISTINCT CONCAT(pId, clientHId) ) AS n,
              "hour"
       FROM   users, tt, rtClosedSessions cs
       WHERE  users.id = tt.userId AND
              tt.userId = cs.userId
              GROUP BY tt.userId;

DROP TABLE tt;





####################################################
############# prepare all for 1 day ################
####################################################


#keep list of top user ids for all sortings
CREATE TEMPORARY TABLE tt (userId INT PRIMARY KEY);

# top 20 now-nFiles
REPLACE INTO tt 
       SELECT userId
       FROM (SELECT userId,
                    COUNT(DISTINCT pathId) AS n
             FROM   rtOpenedSessions os, rtOpenedFiles of
             WHERE  os.id = of.sessionId
                    GROUP BY userId
                    ORDER BY n DESC
                    LIMIT 20
            ) AS X;

# top 20 now-nJobs
REPLACE INTO tt 
       SELECT userId
       FROM (SELECT userId,
                    COUNT(DISTINCT CONCAT(pId, clientHId) ) AS n
             FROM   rtOpenedSessions os, rtOpenedFiles of
             WHERE  os.id = of.sessionId
                    GROUP BY userId
                    ORDER BY n DESC
                    LIMIT 20
            ) AS X;

# top 20 past-mbRead
CREATE TEMPORARY TABLE t_ (userId INT, value BIGINT);
INSERT INTO t_
       SELECT userId,
              SUM(bytesR)/(1024*1024) AS n
       FROM   rtOpenedSessions os, rtClosedFiles cf
       WHERE  os.id = cf.sessionId AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 DAY)
              GROUP BY userId
              ORDER BY n DESC
              LIMIT 20;
INSERT INTO t_
       SELECT userId,
              SUM(bytesR)/(1024*1024) AS n
       FROM   rtClosedSessions os, rtClosedFiles cf
       WHERE  os.id = cf.sessionId AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 DAY)
              GROUP BY userId
              ORDER BY n DESC
              LIMIT 20;
REPLACE INTO tt
        SELECT userId
        FROM (SELECT userId,
                     SUM(value) AS n
              FROM   t_
                     GROUP BY userId
                     ORDER BY n DESC
                     LIMIT 20
             ) AS X;
DROP TABLE t_;

# top 20 past-nFiles
CREATE TEMPORARY TABLE t_ (userId INT, value INT);
INSERT INTO t_
       SELECT userId,
              COUNT(DISTINCT pathId) AS n
       FROM   rtOpenedSessions os, rtClosedFiles cf
       WHERE  os.id = cf.sessionId AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 DAY)
              GROUP BY userId
              ORDER BY n DESC
              LIMIT 20;
INSERT INTO t_
       SELECT userId,
              COUNT(DISTINCT pathId) AS n
       FROM   rtClosedSessions os, rtClosedFiles cf
       WHERE  os.id = cf.sessionId AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 DAY)
              GROUP BY userId
              ORDER BY n DESC
              LIMIT 20;
REPLACE INTO tt
        SELECT userId
        FROM (SELECT userId,
                     SUM(value) AS n
              FROM   t_
                     GROUP BY userId
                     ORDER BY n DESC
                     LIMIT 20
             ) AS X;
DROP TABLE t_;


# top 20 past-nJobs
REPLACE INTO tt
       SELECT userId
       FROM (SELECT userId, 
                    COUNT(DISTINCT CONCAT(pId, clientHId) ) AS n
             FROM   rtClosedSessions os
             WHERE  disconnectT > DATE_SUB(NOW(), INTERVAL 1 DAY)
                    GROUP BY userId
                    ORDER BY n DESC
                    LIMIT 20
             ) AS X;


#############
#So I have a complete list of user names in tt, now build final table


# now: nFiles and nJobs
INSERT INTO tmpTopUsers (userName, nFilesNow, nJobsNow, timePeriod)
       SELECT userName, 
              COUNT(DISTINCT pathId),
              COUNT(DISTINCT CONCAT(pId, clientHId) ),
              "day"
       FROM   users, tt, rtOpenedSessions os, rtOpenedFiles of
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = of.sessionId
              GROUP BY tt.userId;

# past: mbRead
INSERT INTO tmpTopUsers (userName, mbRead, timePeriod)
       SELECT userName,
              SUM(bytesR)/(1024*1024) AS n,
              "day"
       FROM   users, tt, rtOpenedSessions os, rtClosedFiles cf
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = cf.sessionId  AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 DAY)
              GROUP BY tt.userId;
INSERT INTO tmpTopUsers (userName, mbRead, timePeriod)
       SELECT userName,
              SUM(bytesR)/(1024*1024) AS n,
              "day"
       FROM   users, tt, rtClosedSessions os, rtClosedFiles cf
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = cf.sessionId  AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 DAY)
              GROUP BY tt.userId;

# past: nFiles
INSERT INTO tmpTopUsers (userName, nFiles, timePeriod)
       SELECT userName,
              COUNT(DISTINCT pathId),
              "day"
       FROM   users, tt, rtOpenedSessions os, rtClosedFiles cf
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = cf.sessionId  AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 DAY)
              GROUP BY tt.userId;
INSERT INTO tmpTopUsers (userName, nFiles, timePeriod)
       SELECT userName,
              COUNT(DISTINCT pathId),
              "day"
       FROM   users, tt, rtClosedSessions os, rtClosedFiles cf
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = cf.sessionId  AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 DAY)
              GROUP BY tt.userId;

#past: nJobs
INSERT INTO tmpTopUsers (userName, nJobs, timePeriod)
       SELECT userName,
              COUNT(DISTINCT CONCAT(pId, clientHId) ) AS n,
              "day"
       FROM   users, tt, rtClosedSessions cs
       WHERE  users.id = tt.userId AND
              tt.userId = cs.userId
              GROUP BY tt.userId;

DROP TABLE tt;





####################################################
############# prepare all for 1 month ##############
####################################################


#keep list of top user ids for all sortings
CREATE TEMPORARY TABLE tt (userId INT PRIMARY KEY);

# top 20 now-nFiles
REPLACE INTO tt 
       SELECT userId
       FROM (SELECT userId,
                    COUNT(DISTINCT pathId) AS n
             FROM   rtOpenedSessions os, rtOpenedFiles of
             WHERE  os.id = of.sessionId
                    GROUP BY userId
                    ORDER BY n DESC
                    LIMIT 20
            ) AS X;

# top 20 now-nJobs
REPLACE INTO tt 
       SELECT userId
       FROM (SELECT userId,
                    COUNT(DISTINCT CONCAT(pId, clientHId) ) AS n
             FROM   rtOpenedSessions os, rtOpenedFiles of
             WHERE  os.id = of.sessionId
                    GROUP BY userId
                    ORDER BY n DESC
                    LIMIT 20
            ) AS X;

# top 20 past-mbRead
CREATE TEMPORARY TABLE t_ (userId INT, value BIGINT);
INSERT INTO t_
       SELECT userId,
              SUM(bytesR)/(1024*1024) AS n
       FROM   rtOpenedSessions os, rtClosedFiles cf
       WHERE  os.id = cf.sessionId AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 MONTH)
              GROUP BY userId
              ORDER BY n DESC
              LIMIT 20;
INSERT INTO t_
       SELECT userId,
              SUM(bytesR)/(1024*1024) AS n
       FROM   rtClosedSessions os, rtClosedFiles cf
       WHERE  os.id = cf.sessionId AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 MONTH)
              GROUP BY userId
              ORDER BY n DESC
              LIMIT 20;
REPLACE INTO tt
        SELECT userId
        FROM (SELECT userId,
                     SUM(value) AS n
              FROM   t_
                     GROUP BY userId
                     ORDER BY n DESC
                     LIMIT 20
             ) AS X;
DROP TABLE t_;

# top 20 past-nFiles
CREATE TEMPORARY TABLE t_ (userId INT, value INT);
INSERT INTO t_
       SELECT userId,
              COUNT(DISTINCT pathId) AS n
       FROM   rtOpenedSessions os, rtClosedFiles cf
       WHERE  os.id = cf.sessionId AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 MONTH)
              GROUP BY userId
              ORDER BY n DESC
              LIMIT 20;
INSERT INTO t_
       SELECT userId,
              COUNT(DISTINCT pathId) AS n
       FROM   rtClosedSessions os, rtClosedFiles cf
       WHERE  os.id = cf.sessionId AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 MONTH)
              GROUP BY userId
              ORDER BY n DESC
              LIMIT 20;
REPLACE INTO tt
        SELECT userId
        FROM (SELECT userId,
                     SUM(value) AS n
              FROM   t_
                     GROUP BY userId
                     ORDER BY n DESC
                     LIMIT 20
             ) AS X;
DROP TABLE t_;


# top 20 past-nJobs
REPLACE INTO tt
       SELECT userId
       FROM (SELECT userId, 
                    COUNT(DISTINCT CONCAT(pId, clientHId) ) AS n
             FROM   rtClosedSessions os
             WHERE  disconnectT > DATE_SUB(NOW(), INTERVAL 1 MONTH)
                    GROUP BY userId
                    ORDER BY n DESC
                    LIMIT 20
             ) AS X;


#############
#So I have a complete list of user names in tt, now build final table


# now: nFiles and nJobs
INSERT INTO tmpTopUsers (userName, nFilesNow, nJobsNow, timePeriod)
       SELECT userName, 
              COUNT(DISTINCT pathId),
              COUNT(DISTINCT CONCAT(pId, clientHId) ),
              "month"
       FROM   users, tt, rtOpenedSessions os, rtOpenedFiles of
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = of.sessionId
              GROUP BY tt.userId;

# past: mbRead
INSERT INTO tmpTopUsers (userName, mbRead, timePeriod)
       SELECT userName,
              SUM(bytesR)/(1024*1024) AS n,
              "month"
       FROM   users, tt, rtOpenedSessions os, rtClosedFiles cf
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = cf.sessionId  AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 MONTH)
              GROUP BY tt.userId;
INSERT INTO tmpTopUsers (userName, mbRead, timePeriod)
       SELECT userName,
              SUM(bytesR)/(1024*1024) AS n,
              "month"
       FROM   users, tt, rtClosedSessions os, rtClosedFiles cf
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = cf.sessionId  AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 MONTH)
              GROUP BY tt.userId;

# past: nFiles
INSERT INTO tmpTopUsers (userName, nFiles, timePeriod)
       SELECT userName,
              COUNT(DISTINCT pathId),
              "month"
       FROM   users, tt, rtOpenedSessions os, rtClosedFiles cf
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = cf.sessionId  AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 MONTH)
              GROUP BY tt.userId;
INSERT INTO tmpTopUsers (userName, nFiles, timePeriod)
       SELECT userName,
              COUNT(DISTINCT pathId),
              "month"
       FROM   users, tt, rtClosedSessions os, rtClosedFiles cf
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = cf.sessionId  AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 MONTH)
              GROUP BY tt.userId;

#past: nJobs
INSERT INTO tmpTopUsers (userName, nJobs, timePeriod)
       SELECT userName,
              COUNT(DISTINCT CONCAT(pId, clientHId) ) AS n,
              "month"
       FROM   users, tt, rtClosedSessions cs
       WHERE  users.id = tt.userId AND
              tt.userId = cs.userId
              GROUP BY tt.userId;

DROP TABLE tt;











####################################################
############# prepare all for 1 year ###############
####################################################


#keep list of top user ids for all sortings
CREATE TEMPORARY TABLE tt (userId INT PRIMARY KEY);

# top 20 now-nFiles
REPLACE INTO tt 
       SELECT userId
       FROM (SELECT userId,
                    COUNT(DISTINCT pathId) AS n
             FROM   rtOpenedSessions os, rtOpenedFiles of
             WHERE  os.id = of.sessionId
                    GROUP BY userId
                    ORDER BY n DESC
                    LIMIT 20
            ) AS X;

# top 20 now-nJobs
REPLACE INTO tt 
       SELECT userId
       FROM (SELECT userId,
                    COUNT(DISTINCT CONCAT(pId, clientHId) ) AS n
             FROM   rtOpenedSessions os, rtOpenedFiles of
             WHERE  os.id = of.sessionId
                    GROUP BY userId
                    ORDER BY n DESC
                    LIMIT 20
            ) AS X;

# top 20 past-mbRead
CREATE TEMPORARY TABLE t_ (userId INT, value BIGINT);
INSERT INTO t_
       SELECT userId,
              SUM(bytesR)/(1024*1024) AS n
       FROM   rtOpenedSessions os, rtClosedFiles cf
       WHERE  os.id = cf.sessionId AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 YEAR)
              GROUP BY userId
              ORDER BY n DESC
              LIMIT 20;
INSERT INTO t_
       SELECT userId,
              SUM(bytesR)/(1024*1024) AS n
       FROM   rtClosedSessions os, rtClosedFiles cf
       WHERE  os.id = cf.sessionId AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 YEAR)
              GROUP BY userId
              ORDER BY n DESC
              LIMIT 20;
REPLACE INTO tt
        SELECT userId
        FROM (SELECT userId,
                     SUM(value) AS n
              FROM   t_
                     GROUP BY userId
                     ORDER BY n DESC
                     LIMIT 20
             ) AS X;
DROP TABLE t_;

# top 20 past-nFiles
CREATE TEMPORARY TABLE t_ (userId INT, value INT);
INSERT INTO t_
       SELECT userId,
              COUNT(DISTINCT pathId) AS n
       FROM   rtOpenedSessions os, rtClosedFiles cf
       WHERE  os.id = cf.sessionId AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 YEAR)
              GROUP BY userId
              ORDER BY n DESC
              LIMIT 20;
INSERT INTO t_
       SELECT userId,
              COUNT(DISTINCT pathId) AS n
       FROM   rtClosedSessions os, rtClosedFiles cf
       WHERE  os.id = cf.sessionId AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 YEAR)
              GROUP BY userId
              ORDER BY n DESC
              LIMIT 20;
REPLACE INTO tt
        SELECT userId
        FROM (SELECT userId,
                     SUM(value) AS n
              FROM   t_
                     GROUP BY userId
                     ORDER BY n DESC
                     LIMIT 20
             ) AS X;
DROP TABLE t_;


# top 20 past-nJobs
REPLACE INTO tt
       SELECT userId
       FROM (SELECT userId, 
                    COUNT(DISTINCT CONCAT(pId, clientHId) ) AS n
             FROM   rtClosedSessions os
             WHERE  disconnectT > DATE_SUB(NOW(), INTERVAL 1 YEAR)
                    GROUP BY userId
                    ORDER BY n DESC
                    LIMIT 20
             ) AS X;


#############
#So I have a complete list of user names in tt, now build final table


# now: nFiles and nJobs
INSERT INTO tmpTopUsers (userName, nFilesNow, nJobsNow, timePeriod)
       SELECT userName, 
              COUNT(DISTINCT pathId),
              COUNT(DISTINCT CONCAT(pId, clientHId) ),
              "year"
       FROM   users, tt, rtOpenedSessions os, rtOpenedFiles of
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = of.sessionId
              GROUP BY tt.userId;

# past: mbRead
INSERT INTO tmpTopUsers (userName, mbRead, timePeriod)
       SELECT userName,
              SUM(bytesR)/(1024*1024) AS n,
              "year"
       FROM   users, tt, rtOpenedSessions os, rtClosedFiles cf
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = cf.sessionId  AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 YEAR)
              GROUP BY tt.userId;
INSERT INTO tmpTopUsers (userName, mbRead, timePeriod)
       SELECT userName,
              SUM(bytesR)/(1024*1024) AS n,
              "year"
       FROM   users, tt, rtClosedSessions os, rtClosedFiles cf
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = cf.sessionId  AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 YEAR)
              GROUP BY tt.userId;

# past: nFiles
INSERT INTO tmpTopUsers (userName, nFiles, timePeriod)
       SELECT userName,
              COUNT(DISTINCT pathId),
              "year"
       FROM   users, tt, rtOpenedSessions os, rtClosedFiles cf
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = cf.sessionId  AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 YEAR)
              GROUP BY tt.userId;
INSERT INTO tmpTopUsers (userName, nFiles, timePeriod)
       SELECT userName,
              COUNT(DISTINCT pathId),
              "year"
       FROM   users, tt, rtClosedSessions os, rtClosedFiles cf
       WHERE  users.id = tt.userId  AND
              tt.userId = os.userId AND
              os.id = cf.sessionId  AND
              closeT > DATE_SUB(NOW(), INTERVAL 1 YEAR)
              GROUP BY tt.userId;

#past: nJobs
INSERT INTO tmpTopUsers (userName, nJobs, timePeriod)
       SELECT userName,
              COUNT(DISTINCT CONCAT(pId, clientHId) ) AS n,
              "year"
       FROM   users, tt, rtClosedSessions cs
       WHERE  users.id = tt.userId AND
              tt.userId = cs.userId
              GROUP BY tt.userId;

DROP TABLE tt;














SELECT userName,
       SUM(nFilesNow) AS nFilesNow,
       SUM(nJobsNow)  AS nJobsNow,
       SUM(mbRead)    AS mbRead,
       SUM(nFiles)    AS nFiles,
       SUM(nJobs)     AS nJobs
FROM   tmpTopUsers
WHERE  timePeriod LIKE "month"
       GROUP BY userName
       ORDER BY mbRead DESC
       LIMIT 20;
  

